x-airflow-common:
  &airflow-common
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
    NETEX_API_KEY: ${NETEX_API_KEY}
    SIRI_API_KEY: ${SIRI_API_KEY}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs:z
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    - airflow-db

services:
  # --- Airflow metadata database ---
  airflow-db:
    image: postgres:16.4
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata_airflow:/var/lib/postgresql/data:z
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      retries: 5
    restart: always

  # --- pgAdmin UI for both databases ---
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      CSRF_ENABLED: "False"
    ports:
      - "5050:80"
    depends_on:
      - airflow-db

  # --- Airflow DB initialization & user setup ---
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init
        airflow users create \
          --username airflow \
          --password airflow \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
    restart: "no"

  # --- Airflow Webserver ---
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      - airflow-init
    restart: always

  # --- Airflow Scheduler ---
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      - airflow-init
    restart: always

volumes:
  pgdata_airflow:
